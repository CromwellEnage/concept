[/============================================================================
    Copyright (C) 2013-2016 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
============================================================================/]

[section:is_additive `is_additive`]

[section Synopsis]
[reference__is_additive]
[endsect]

[section Description]
This metafunction evaluates to __mpl_true__ if the first type is addable and
subtractable by the second type, and if the second type is the result type of
subtracting two objects of the first type.  If the first type is mutable, then
it must also be both addition-assignable and subtraction-assignable by the
second type.  This metafunction evaluates to __mpl_false__ otherwise.
[endsect]

[section:default Default argument types]
[reference__is_additive__fwd]

If the second type is not specified, then it defaults to the first type.
[endsect]

[section:definition Where defined]
``
#include <__is_additive__header__>
``

--or--

``
#include <__concept_traits__header__>
``

Forward declaration:

``
#include <__concept_traits_fwd__header__>
``
[endsect]

[section Test]
This metafunction is somewhat more permissive than the __has_plus__,
__has_plus_assign__, __has_minus__, and __has_minus_assign__ metafunctions
offered by __Boost_TypeTraits__.

[test__is_additive__minimal]

On the other hand, not all primitive types are additive.

[test__is_additive__builtin]

This metafunction can be useful for double-checking the type correctness of
user-defined and standard-defined arithmetic types, models of the
__Random_Access_Iterator__ and __Random_Access_Traversal_Iterator__ concepts,
and so on.

[test__is_additive__other]

The full source file can be found at __is_additive__test_source__.
[endsect]

[endsect] [/ is_additive]

