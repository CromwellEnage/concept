[/============================================================================
    Copyright (C) 2013-2018 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
============================================================================/]

[section:has_allocate `has_allocate`]

[section Synopsis]
[reference__has_allocate]
[endsect]

[section Description]
This metafunction evaluates to __mpl_true__ if the following are true:

  * The type `T` is defined with either a nested `value_type` or a nested
    `pointer` type.
  * The type `T` is defined with an `allocate` member function.
  * The type `ResultPlaceholderExpr` evaluates to __mpl_true__ when passed in
    the result type of the `allocate` member function as its argument type.
  * One of the following are true:
      * The `allocate` member function takes in two arguments: an rvalue
        reference of the size type of the __std_allocator_traits__ of type
        `T`, and an rvalue reference of type `U`.
      * The `allocate` member function takes in an rvalue reference of the
        size type of the __std_allocator_traits__ of type `T`, and the type
        `U` is `boost::concept::traits::use_default`.

This metafunction evaluates to __mpl_false__ otherwise.
[endsect]

[section:type_requirements Type requirements]
The type `ResultPlaceholderExpr` must be a unary __MPL_Lambda_Expression__
that can take in the result type of the `allocate` member function as its
argument type and evaluate to a type for which
__bct_is_mpl_boolean_constant__ evaluates to __mpl_true__.
[endsect]

[section:default Default argument types]
[reference__has_allocate__fwd]
[endsect]

[section:definition Where defined]
``
#include <__has_allocate__header__>
``

--or--

``
#include <__concept_traits__header__>
``

Forward declaration:

``
#include <__member_function__header_fwd__>
``

--or--

``
#include <__concept_traits__header_fwd__>
``
[endsect]

[endsect] [/ has_allocate]

