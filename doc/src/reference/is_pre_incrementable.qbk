[/============================================================================
    Copyright (C) 2013-2018 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
============================================================================/]

[section:is_pre_incrementable `is_pre_incrementable`]

[section Synopsis]
[reference__is_pre_incrementable]
[endsect]

[section Description]
This metafunction evaluates to __mpl_true__ if the specified type implements
the pre-increment operator, and if the type `ResultPlaceholderExpr` evaluates
to __mpl_true__ when passed in the result type of the pre-increment operator
as its single argument type.  This metafunction evaluates to __mpl_false__
otherwise.
[endsect]

[section:type_requirements Type requirements]
The type `ResultPlaceholderExpr` must be an __MPL_Lambda_Expression__ that can
take in the result type of the pre-increment operator as its single argument
type and evaluate to a type for which __bct_is_mpl_boolean_constant__
evaluates to __mpl_true__.
[endsect]

[section:default_args Default argument types]
[reference__is_pre_incrementable__fwd]

If the type `ResultPlaceholderExpr` is not specified, then this metafunction
checks if the result type of the pre-increment operator is `const`-qualified
and is the same as the reference-to-`const` version of type `T`, or if the
result type of the pre-increment operator is non-`const` and is the same as
the mutable lvalue reference version of type `T`.
[endsect]

[section:definition Where defined]
``
#include <__is_pre_incrementable__header__>
``

--or--

``
#include <__concept_traits__header__>
``

Forward declaration:

``
#include <__query__header_fwd__>
``

--or--

``
#include <__concept_traits__header_fwd__>
``
[endsect]

[section Test]
By default, this metafunction checks for proper return types as far as lvalue
references and type conversions are concerned, but otherwise it does not check
for canonical correctness.  Note that `const`-qualified types are not
pre-incrementable.

[test__is_pre_incrementable__minimal]

All primitive types are pre-incrementable.

[test__is_pre_incrementable__builtin]

All __Boost_Multiprecision__ integer and rational types are pre-incrementable.

[test__is_pre_incrementable__multiprecision]

All __Boost_Iterator__ archetypes are pre-incrementable.

[test__is_pre_incrementable__archetypes]

All iterators over __Container__ models provided by the C++ standard library
are pre-incrementable.

[test__is_pre_incrementable__std_iterators]

This metafunction can be useful for double-checking the type correctness of
user-defined and standard-defined arithmetic types.  However, use more
restrictive metafunctions when the need for tighter requirements arises, such
as __bct_is_incrementable_iterator__ to detect __Incrementable_Iterator__
models.

[test__is_pre_incrementable__other]

The full source file can be found at __is_pre_incrementable__test_source__.
[endsect]

[endsect] [/ is_pre_incrementable]

