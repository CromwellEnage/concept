[/============================================================================
    Copyright (C) 2013-2018 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
============================================================================/]

[section:is_incrementable `is_incrementable`]

[section Synopsis]
[reference__is_incrementable]
[endsect]

[section Description]
This metafunction evaluates to __mpl_true__ if the specified type implements
both the pre-increment and post-increment operators; it evaluates to
__mpl_false__ otherwise.
[endsect]

[section:definition Where defined]
``
#include <__is_incrementable__header__>
``

--or--

``
#include <__concept_traits__header__>
``

Forward declaration:

``
#include <__query__header_fwd__>
``

--or--

``
#include <__concept_traits__header_fwd__>
``
[endsect]

[section Test]
This metafunction does not check for the canonical correctness of the
post-increment operator, which, for some types otherwise considered
incrementable, returns a proxy type that is not convertible to the owning
type.  Note that `const`-qualified types are not incrementable.

[test__is_incrementable__minimal]

All primitive types are incrementable.

[test__is_incrementable__builtin]

All __Boost_Multiprecision__ integer and rational types are incrementable.

[test__is_incrementable__multiprecision]

All __Boost_Iterator__ archetypes are incrementable.

[test__is_incrementable__archetypes]

All iterators over __Container__ models provided by the C++ standard library
are incrementable.

[test__is_incrementable__std_iterators]

This metafunction can be useful for double-checking the type correctness of
user-defined and standard-defined arithmetic types.  However, use more
restrictive metafunctions when the need for tighter requirements arises, such
as __bct_is_incrementable_iterator__ to detect __Incrementable_Iterator__
models.

[test__is_incrementable__other]

The full source file can be found at __is_incrementable__test_source__.
[endsect]

[endsect] [/ is_incrementable]

