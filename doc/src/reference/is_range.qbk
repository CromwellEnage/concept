[/=============================================================================
    Copyright (C) 2013-2015 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:is_range `is_range`]

[section Synopsis]
[reference__is_range]
[endsect]

[section Description]
This metafunction evaluates to __mpl_true__ if the type `T` models one of
the __range_concepts__ as determined by the type `PlaceholderExpr`, which
in turn must evaluate to __mpl_true__ when passed in the iterator type of
`T` as its argument type.  This metafunction evaluates to __mpl_false__
otherwise.
[endsect]

[section:type_requirements Type requirements]
The type `PlaceholderExpr` must be an __MPL_Lambda_Expression__ that can
take in the iterator type of `T` as its argument type and evaluate to a
type for which __dst_is_mpl_boolean_constant__ evaluates to
__mpl_true__.
[endsect]

[section:default Default argument types]
[reference__is_range__fwd]

By default, this metafunction determines if a type models the
__Single_Pass_Range__ concept.
[endsect]

[section:definition Where defined]
``
#include <__is_range__header__>
``

--or--

``
#include <__ds_traits__header__>
``

Forward declaration:

``
#include <__ds_traits_fwd__header__>
``
[endsect]

[section Test]
By default, this metafunction determines if a type models the
__Single_Pass_Range__ concept.  See __is_single_pass_range__test_source__.

This metafunction can be used in conjunction with
__dst_is_forward_iterator__ to determine if a type models the
__Forward_Range__ concept.  See __is_forward_range__test_source__.

This metafunction can be used in conjunction with
__dst_is_bidirectional_iterator__ to determine if a type models the
__Bidirectional_Range__ concept.  See __is_bidirectional_range__test_source__.

This metafunction can be used in conjunction with
__dst_is_random_access_iterator__ to determine if a type models the
__Random_Access_Range__ concept.  See __is_random_access_range__test_source__.
[endsect]

[endsect] [/ is_range]

