[/============================================================================
    Copyright (C) 2013-2018 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
============================================================================/]

[section:is_reference_of `is_reference_of`]

[section Synopsis]
[reference__is_reference_of]
[endsect]

[section Description]
This metafunction evaluates to __mpl_true__ if the type `T1` is the reference
type of `T2`.  More specifically, if `T2` is mutable, then `T1` must be the
same as `T1::reference`, but if `T2` is `const`, then `T1` must be the same as
[^_std_remove_const_<
_std_remove_reference_<T2>::type>::type::const_reference];
this metafunction evaluates to __mpl_false__ otherwise.
[endsect]

[section:definition Where defined]
``
#include <__is_reference_of__header__>
``

--or--

``
#include <__concept_traits__header__>
``

Forward declaration:

``
#include <__nested_type__header_fwd__>
``

--or--

``
#include <__concept_traits_fwd__header__>
``
[endsect]

[endsect] [/ is_reference_of]

