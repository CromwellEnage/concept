# Copyright 2018 Cromwell D. Enage
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

project boost/concept
    :
        default-build
        <warnings>off
    ;

alias concept
    :
        [ compile value_generator_archetype.cpp ]
        [ compile value_distro_archetype.cpp ]
        [ compile indexable_itr_archetype.cpp ]
        [ compile mut_indexable_itr_archetype.cpp ]
        [ compile single_pass_range_archetype.cpp ]
        [ compile forward_range_archetype.cpp ]
        [ compile bidirectional_rng_archetype.cpp ]
        [ compile random_access_rng_archetype.cpp ]
        [ compile is_std_integral_constant.cpp ]
        [ compile is_std_boolean_constant.cpp ]
        [ compile is_mpl_static_constant.cpp ]
        [ compile is_mpl_boolean_constant.cpp ]
        [ compile is_mpl_integral_constant.cpp ]
        [ compile is_rational_constant.cpp ]
        [ compile is_lvalue_assignable.cpp ]
        [ compile is_rvalue_assignable.cpp ]
        [ compile is_pre_incrementable.cpp ]
        [ compile is_incrementable.cpp ]
        [ compile is_pre_decrementable.cpp ]
        [ compile is_decrementable.cpp ]
        [ compile is_complementable.cpp ]
        [ compile is_bitwise_and_assignable.cpp ]
        [ compile is_bitwise_and_operable.cpp ]
        [ compile is_bitwise_or_assignable.cpp ]
        [ compile is_bitwise_xor_operable.cpp ]
        [ compile is_bitwise_xor_assignable.cpp ]
        [ compile is_bitwise_or_operable.cpp ]
        [ compile is_left_shift_assignable.cpp ]
        [ compile is_left_shift_operable.cpp ]
        [ compile is_right_shift_assignable.cpp ]
        [ compile is_right_shift_operable.cpp ]
        [ compile is_bitmask_type.cpp ]
        [ compile is_addition_assignable.cpp ]
        [ compile is_addable.cpp ]
        [ compile is_subtraction_assignable.cpp ]
        [ compile is_subtractable.cpp ]
        [ compile is_additive.cpp ]
        [ compile is_multiply_assignable.cpp ]
        [ compile is_multipliable.cpp ]
        [ compile is_division_assignable.cpp ]
        [ compile is_dividable.cpp ]
        [ compile is_modulo_assignable.cpp ]
        [ compile is_modulo_operable.cpp ]
        [ compile is_multiplicative.cpp ]
        [ compile is_identity_operable.cpp ]
        [ compile is_negatable.cpp ]
        [ compile is_logically_negatable.cpp ]
        [ compile is_boolean_expression.cpp ]
        [ compile is_equality_comparable.cpp ]
        [ compile is_less_than_comparable.cpp ]
        [ compile is_comparable.cpp ]
        [ compile is_math_real_type.cpp ]
        [ compile is_math_rational_type.cpp ]
        [ compile is_math_complex_type.cpp ]
        [ compile is_unary_function.cpp ]
        [ compile is_adaptable_unary_func.cpp ]
        [ compile is_unary_predicate.cpp ]
        [ compile is_adaptable_unary_pred.cpp ]
        [ compile is_binary_function.cpp ]
        [ compile is_adaptable_binary_func.cpp ]
        [ compile is_binary_predicate.cpp ]
        [ compile is_adaptable_binary_pred.cpp ]
        [ compile is_callable.cpp ]
        [ compile is_callable_predicate.cpp ]
        [ compile result_of.cpp ]
        [ compile is_value_generator.cpp ]
        [ compile is_value_distribution.cpp ]
        [ compile is_value_distribution_w_prm.cpp ]
        [ compile is_math_distribution.cpp ]
        [ compile is_accumulator.cpp ]
        [ compile is_nullable_pointer.cpp ]
        [ compile is_optional_pointee.cpp ]
        [ compile has_element_type.cpp ]
        [ compile is_iterator.cpp ]
        [ compile is_readable_iterator.cpp ]
        [ compile is_lvalue_iterator.cpp ]
        [ compile is_incrementable_iterator.cpp ]
        [ compile is_single_pass_iterator.cpp ]
        [ compile is_input_iterator.cpp ]
        [ compile is_forward_iterator.cpp ]
        [ compile is_fwd_traversal_iterator.cpp ]
        [ compile is_bidirectional_iterator.cpp ]
        [ compile is_bidir_traversal_iterator.cpp ]
        [ compile is_indexable_iterator.cpp ]
        [ compile is_index_traversal_iterator.cpp ]
        [ compile is_random_access_iterator.cpp ]
        [ compile is_r_acc_traversal_iterator.cpp ]
        [ compile is_writable_iterator.cpp ]
        [ compile is_output_iterator.cpp ]
        [ compile is_single_pass_range.cpp ]
        [ compile is_forward_range.cpp ]
        [ compile is_bidirectional_range.cpp ]
        [ compile is_random_access_range.cpp ]
        [ compile is_allocator.cpp ]
        [ compile is_clone_allocator.cpp ]
        [ compile has_get_allocator.cpp ]
        [ compile is_simple_node_handle.cpp ]
        [ compile is_key_mapped_node_handle.cpp ]
        [ compile is_container.cpp ]
        [ compile is_cxx11_container.cpp ]
        [ compile is_ptr_container.cpp ]
        [ compile is_associative_container.cpp ]
        [ compile is_pair_assoc_container.cpp ]
        [ compile is_pair_assoc_ptr_container.cpp ]
        [ compile is_hashed_assoc_container.cpp ]
        [ compile is_unorder_assoc_container.cpp ]
        [ compile is_sorted_assoc_container.cpp ]
        [ compile is_flat_assoc_container.cpp ]
        [ compile is_unique_assoc_container.cpp ]
        [ compile is_u_sm_assoc_ptr_container.cpp ]
        [ compile is_u_pr_assoc_ptr_container.cpp ]
        [ compile is_multiple_assoc_container.cpp ]
        [ compile is_m_sm_assoc_ptr_container.cpp ]
        [ compile is_m_pr_assoc_ptr_container.cpp ]
        [ compile is_reversible.cpp ]
        [ compile is_reversible_container.cpp ]
        [ compile is_cxx11_reversible_cont.cpp ]
        [ compile is_indexable_container.cpp ]
        [ compile is_random_access_container.cpp ]
        [ compile is_multi_array.cpp ]
        [ compile is_circular_buffer.cpp ]
        [ compile is_bimap.cpp ]
        [ compile is_ublas_vector_expression.cpp ]
        [ compile is_ublas_vector.cpp ]
        [ compile is_ublas_matrix_expression.cpp ]
        [ compile is_ublas_matrix.cpp ]
        [ compile is_sequence.cpp ]
        [ compile is_back_insertion_sequence.cpp ]
        [ compile is_front_insertion_sequence.cpp ]
        [ compile is_queue.cpp ]
        [ compile is_stack_or_std_heap.cpp ]
        [ compile is_heap.cpp ]
        [ compile is_iteratable_heap.cpp ]
        [ compile is_order_iteratable_heap.cpp ]
        [ compile is_mergeable_heap.cpp ]
        [ compile is_mutable_heap.cpp ]
        [ compile is_half_runtime_pair.cpp ]
        [ compile is_runtime_pair.cpp ]
        [ compile is_compressed_pair.cpp ]
        [ compile is_mpl_forward_iterator.cpp ]
        [ compile is_mpl_bidir_iterator.cpp ]
        [ compile is_mpl_ra_iterator.cpp ]
        [ compile is_fusion_forward_iterator.cpp ]
        [ compile is_fusion_bidir_iterator.cpp ]
        [ compile is_fusion_ra_iterator.cpp ]
        [ compile is_fusion_assoc_iterator.cpp ]
        [ compile is_mpl_forward_sequence.cpp ]
        [ compile is_mpl_bidir_sequence.cpp ]
        [ compile is_mpl_ra_sequence.cpp ]
        [ compile is_mpl_assoc_sequence.cpp ]
        [ compile is_mpl_extensible_sequence.cpp ]
        [ compile is_mpl_fwd_ext_sequence.cpp ]
        [ compile is_mpl_back_ext_sequence.cpp ]
        [ compile is_fusion_forward_sequence.cpp ]
        [ compile is_fusion_bidir_sequence.cpp ]
        [ compile is_fusion_ra_sequence.cpp ]
        [ compile is_fusion_assoc_sequence.cpp ]
        [ compile is_readable_property_map.cpp ]
        [ compile is_writable_property_map.cpp ]
        [ compile is_read_write_property_map.cpp ]
        [ compile is_lvalue_property_map.cpp ]
        [ compile is_graph.cpp ]
        [ compile is_vertex_mutable_graph.cpp ]
        [ compile is_edge_mutable_graph.cpp ]
        [ compile is_vertex_list_graph.cpp ]
        [ compile is_edge_list_graph.cpp ]
        [ compile is_incidence_graph.cpp ]
        [ compile is_adjacency_graph.cpp ]
        [ compile is_bidirectional_graph.cpp ]
    ;

