// Copyright (C) 2014-2017 Cromwell D. Enage
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include <boost/concept/traits/query/is_value_generator.hpp>

#include <boost/mpl/assert.hpp>
#include <boost/mpl/aux_/test.hpp>

#include <boost/random.hpp>

//[test__is_value_generator__boost_random
MPL_TEST_CASE()
{
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::minstd_rand0
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::minstd_rand>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::rand48>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ecuyer1988>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::knuth_b>
    ));
    //...
    //<-
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::kreutzer1986
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::taus88>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::hellekalek1995
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::mt11213b>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::mt19937>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::mt19937_64>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci607
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci1279
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci2281
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci3217
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci4423
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci9689
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci19937
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::lagged_fibonacci23209
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux3>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux4>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux64_3>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux64_4>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux3_01>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux4_01>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::ranlux64_3_01
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<
            boost::random::ranlux64_4_01
        >
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux24>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<boost::random::ranlux48>
    ));
    //->
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::uniform_smallint<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::uniform_int_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::uniform_01<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::uniform_real_distribution<>
        >
    ));
    //...
    //<-
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::poisson_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::exponential_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::gamma_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::weibull_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::extreme_value_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::beta_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::laplace_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::normal_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::lognormal_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::chi_squared_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::non_central_chi_squared_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::cauchy_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::fisher_f_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::student_t_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::discrete_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::piecewise_constant_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::piecewise_linear_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::triangle_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            boost::random::uniform_on_sphere<>
        >
    ));
    //->
}
//]

#include <boost/config.hpp>

#if !defined BOOST_NO_CXX11_HDR_RANDOM
#include <random>

//[test__is_value_generator__std_random
MPL_TEST_CASE()
{
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::minstd_rand0>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::minstd_rand>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::mt19937>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::mt19937_64>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::ranlux24_base>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::ranlux48_base>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::ranlux24>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::ranlux48>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::knuth_b>
    ));
    BOOST_MPL_ASSERT((
        boost::concept::traits::is_value_generator<std::random_device>
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::uniform_int_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::uniform_real_distribution<>
        >
    ));
    //...
    //<-
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::bernoulli_distribution
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::binomial_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::geometric_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::negative_binomial_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::poisson_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::discrete_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::exponential_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::gamma_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::weibull_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::extreme_value_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::normal_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::lognormal_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::chi_squared_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::cauchy_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::fisher_f_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::student_t_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::piecewise_constant_distribution<>
        >
    ));
    BOOST_MPL_ASSERT_NOT((
        boost::concept::traits::is_value_generator<
            std::piecewise_linear_distribution<>
        >
    ));
    //->
}
//]
#endif  // BOOST_NO_CXX11_HDR_RANDOM

